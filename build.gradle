plugins {
    id 'io.jmix' version '0.1.16'
    id 'java'
    id 'groovy'
}

apply plugin: 'org.springframework.boot'

jmix {
    bomVersion = '0.2.0-SNAPSHOT'
}

group = 'io.jmix.tests'
version = '0.2.0-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    jcenter()
    maven {
        url 'https://nexus.jmix.io/repository/public'
    }
}

dependencies {
    implementation 'io.jmix.core:jmix-core-starter'
    implementation 'io.jmix.data:jmix-data-starter'
    implementation 'io.jmix.ui:jmix-ui-starter'
    implementation 'io.jmix.ui:jmix-ui-data-starter'
    implementation 'io.jmix.ui:jmix-ui-themes-compiled'
    implementation 'io.jmix.ui:jmix-ui-widgets-compiled'
    implementation 'io.jmix.security:jmix-security-starter'
    implementation 'io.jmix.security:jmix-security-ui-starter'
    implementation 'io.jmix.security:jmix-security-data-starter'

    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation('org.jsoup:jsoup') {
        version {
            strictly '1.11.2'
        }
    }

    runtimeOnly 'org.hsqldb:hsqldb'

    testImplementation "io.jmix.masquerade:jmix-masquerade:${jmix.bomVersion}"

    testImplementation 'com.codeborne:selenide:5.14.0'
    testImplementation 'org.codehaus.groovy:groovy:3.0.5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    testImplementation 'org.testcontainers:selenium:1.14.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.14.3'
    testImplementation 'org.testcontainers:postgresql:1.14.3'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }

    testImplementation('com.assertthat:selenium-shutterbug:1.2') {
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-java'
    }

    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testRuntime 'org.postgresql:postgresql:42.2.16'
}

task testUi(type: Test) {
    useJUnitPlatform()

    filter {
        includeTestsMatching "io.jmix.tests.ui.*"
    }

    if (System.getProperty('jmix.tests.ui.baseHost')) {
        systemProperty 'jmix.tests.ui.baseHost', System.getProperty('jmix.tests.ui.baseHost')
    }

    if (System.getProperty('selenide.browser')) {
        systemProperty 'selenide.browser', System.getProperty('selenide.browser')
    }

    if (System.getProperty('webdriver.chrome.driver')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
    }

    if (System.getProperty('webdriver.gecko.driver')) {
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    }
}

task testSampler(type: Test) {
    useJUnitPlatform()

    filter {
        includeTestsMatching "io.jmix.tests.sampler.*"
    }

    if (System.getProperty('jmix.tests.sampler.baseUrl')) {
        systemProperty 'selenide.baseUrl', System.getProperty('jmix.tests.sampler.baseUrl')
    } else {
        systemProperty 'selenide.baseUrl', 'http://host.docker.internal:8080/sampler'
    }

    if (System.getProperty('selenide.browser')) {
        systemProperty 'selenide.browser', System.getProperty('selenide.browser')
    }

    if (System.getProperty('webdriver.chrome.driver')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
    }

    if (System.getProperty('webdriver.gecko.driver')) {
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    }

    if (System.getProperty('jmix.tests.sampler.screenshot.standardFolderPath')) {
        systemProperty 'jmix.tests.sampler.screenshot.standardFolderPath',
                System.getProperty('jmix.tests.sampler.screenshot.standardFolderPath')
    } else {
        systemProperty 'jmix.tests.sampler.screenshot.standardFolderPath',
                './src/test/resources/io/jmix/tests/sampler/screenshot/standard/'
    }

    def diffFolderPath
    if (System.getProperty('jmix.tests.sampler.screenshot.diffFolderPath')) {
        diffFolderPath = System.getProperty('jmix.tests.sampler.screenshot.diffFolderPath')
    } else {
        diffFolderPath = "${project.buildDir}/reports/tests/testSampler/screenshot/differences/"
    }

    def diffFolder = new File(diffFolderPath)
    if (!diffFolder.exists()) {
        diffFolder.mkdirs()
    } else {
        delete diffFolder.listFiles()
    }

    systemProperty 'jmix.tests.sampler.screenshot.diffFolderPath', diffFolderPath
}

test.dependsOn testUi, testSampler
